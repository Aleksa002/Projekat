"""Autogenerated SQLAlchemy models based on OpenAlchemy models."""
# pylint: disable=no-member,super-init-not-called,unused-argument

import datetime
import typing

import sqlalchemy
from sqlalchemy import orm

from open_alchemy import models

Base = models.Base  # type: ignore


class MeasurementDict(typing.TypedDict, total=True):
    """TypedDict for properties that are required."""

    id: int
    time: str
    variable: "VariableDict"
    value: float
    source: "SourceDict"
    station: "StationDict"


class TMeasurement(typing.Protocol):
    """
    SQLAlchemy model protocol.

    Attrs:
        id: Identifikacioni broj (interni ključ)
        time: Vreme merenja
        variable: Naziv meteorološke promenljive
        value: Vrednost meteorološke promenljive
        source: Izvor merenja (sadrzi location)
        station: Meteorološka stanica

    """

    # SQLAlchemy properties
    __table__: sqlalchemy.Table
    __tablename__: str
    query: orm.Query

    # Model properties
    id: 'sqlalchemy.Column[int]'
    time: 'sqlalchemy.Column[datetime.datetime]'
    variable: 'sqlalchemy.Column["TVariable"]'
    value: 'sqlalchemy.Column[float]'
    source: 'sqlalchemy.Column["TSource"]'
    station: 'sqlalchemy.Column["TStation"]'

    def __init__(self, id: int, time: datetime.datetime, variable: "TVariable", value: float, source: "TSource", station: "TStation") -> None:
        """
        Construct.

        Args:
            id: Identifikacioni broj (interni ključ)
            time: Vreme merenja
            variable: Naziv meteorološke promenljive
            value: Vrednost meteorološke promenljive
            source: Izvor merenja (sadrzi location)
            station: Meteorološka stanica

        """
        ...

    @classmethod
    def from_dict(cls, id: int, time: datetime.datetime, variable: "VariableDict", value: float, source: "SourceDict", station: "StationDict") -> "TMeasurement":
        """
        Construct from a dictionary (eg. a POST payload).

        Args:
            id: Identifikacioni broj (interni ključ)
            time: Vreme merenja
            variable: Naziv meteorološke promenljive
            value: Vrednost meteorološke promenljive
            source: Izvor merenja (sadrzi location)
            station: Meteorološka stanica

        Returns:
            Model instance based on the dictionary.

        """
        ...

    @classmethod
    def from_str(cls, value: str) -> "TMeasurement":
        """
        Construct from a JSON string (eg. a POST payload).

        Returns:
            Model instance based on the JSON string.

        """
        ...

    def to_dict(self) -> MeasurementDict:
        """
        Convert to a dictionary (eg. to send back for a GET request).

        Returns:
            Dictionary based on the model instance.

        """
        ...

    def to_str(self) -> str:
        """
        Convert to a JSON string (eg. to send back for a GET request).

        Returns:
            JSON string based on the model instance.

        """
        ...


Measurement: typing.Type[TMeasurement] = models.Measurement  # type: ignore


class LocationDict(typing.TypedDict, total=True):
    """TypedDict for properties that are required."""

    id: int
    name: str
    country: str
    lat: float
    long: float
    altitude: int
    type: str


class TLocation(typing.Protocol):
    """
    SQLAlchemy model protocol.

    Attrs:
        id: Identifikacioni broj (interni ključ)
        name: Naziv lokacije
        country: Država lokacije
        lat: Geografska širina
        long: Geografska dužina
        altitude: Nadmorska visina (metara)
        type: Tip lokacije

    """

    # SQLAlchemy properties
    __table__: sqlalchemy.Table
    __tablename__: str
    query: orm.Query

    # Model properties
    id: 'sqlalchemy.Column[int]'
    name: 'sqlalchemy.Column[str]'
    country: 'sqlalchemy.Column[str]'
    lat: 'sqlalchemy.Column[float]'
    long: 'sqlalchemy.Column[float]'
    altitude: 'sqlalchemy.Column[int]'
    type: 'sqlalchemy.Column[str]'

    def __init__(self, id: int, name: str, country: str, lat: float, long: float, altitude: int, type: str) -> None:
        """
        Construct.

        Args:
            id: Identifikacioni broj (interni ključ)
            name: Naziv lokacije
            country: Država lokacije
            lat: Geografska širina
            long: Geografska dužina
            altitude: Nadmorska visina (metara)
            type: Tip lokacije

        """
        ...

    @classmethod
    def from_dict(cls, id: int, name: str, country: str, lat: float, long: float, altitude: int, type: str) -> "TLocation":
        """
        Construct from a dictionary (eg. a POST payload).

        Args:
            id: Identifikacioni broj (interni ključ)
            name: Naziv lokacije
            country: Država lokacije
            lat: Geografska širina
            long: Geografska dužina
            altitude: Nadmorska visina (metara)
            type: Tip lokacije

        Returns:
            Model instance based on the dictionary.

        """
        ...

    @classmethod
    def from_str(cls, value: str) -> "TLocation":
        """
        Construct from a JSON string (eg. a POST payload).

        Returns:
            Model instance based on the JSON string.

        """
        ...

    def to_dict(self) -> LocationDict:
        """
        Convert to a dictionary (eg. to send back for a GET request).

        Returns:
            Dictionary based on the model instance.

        """
        ...

    def to_str(self) -> str:
        """
        Convert to a JSON string (eg. to send back for a GET request).

        Returns:
            JSON string based on the model instance.

        """
        ...


Location: typing.Type[TLocation] = models.Location  # type: ignore


class VariableDict(typing.TypedDict, total=True):
    """TypedDict for properties that are required."""

    id: int
    name: str
    unit: str


class TVariable(typing.Protocol):
    """
    SQLAlchemy model protocol.

    Meteorološka promenljiva

    Attrs:
        id: Identifikacioni broj (interni ključ)
        name: Naziv meteorološke varijable
        unit: Jedinica mere

    """

    # SQLAlchemy properties
    __table__: sqlalchemy.Table
    __tablename__: str
    query: orm.Query

    # Model properties
    id: 'sqlalchemy.Column[int]'
    name: 'sqlalchemy.Column[str]'
    unit: 'sqlalchemy.Column[str]'

    def __init__(self, id: int, name: str, unit: str) -> None:
        """
        Construct.

        Args:
            id: Identifikacioni broj (interni ključ)
            name: Naziv meteorološke varijable
            unit: Jedinica mere

        """
        ...

    @classmethod
    def from_dict(cls, id: int, name: str, unit: str) -> "TVariable":
        """
        Construct from a dictionary (eg. a POST payload).

        Args:
            id: Identifikacioni broj (interni ključ)
            name: Naziv meteorološke varijable
            unit: Jedinica mere

        Returns:
            Model instance based on the dictionary.

        """
        ...

    @classmethod
    def from_str(cls, value: str) -> "TVariable":
        """
        Construct from a JSON string (eg. a POST payload).

        Returns:
            Model instance based on the JSON string.

        """
        ...

    def to_dict(self) -> VariableDict:
        """
        Convert to a dictionary (eg. to send back for a GET request).

        Returns:
            Dictionary based on the model instance.

        """
        ...

    def to_str(self) -> str:
        """
        Convert to a JSON string (eg. to send back for a GET request).

        Returns:
            JSON string based on the model instance.

        """
        ...


Variable: typing.Type[TVariable] = models.Variable  # type: ignore


class SourceDict(typing.TypedDict, total=True):
    """TypedDict for properties that are required."""

    id: int
    code: str
    name: str
    type: str
    location: "LocationDict"


class TSource(typing.Protocol):
    """
    SQLAlchemy model protocol.

    Naziv izvora

    Attrs:
        id: Identifikacioni broj (kluč)
        code: Kod (skraćeni naziv)
        name: Naziv izvora
        type: Tip izvora
        location: Lokacija izvora

    """

    # SQLAlchemy properties
    __table__: sqlalchemy.Table
    __tablename__: str
    query: orm.Query

    # Model properties
    id: 'sqlalchemy.Column[int]'
    code: 'sqlalchemy.Column[str]'
    name: 'sqlalchemy.Column[str]'
    type: 'sqlalchemy.Column[str]'
    location: 'sqlalchemy.Column["TLocation"]'

    def __init__(self, id: int, code: str, name: str, type: str, location: "TLocation") -> None:
        """
        Construct.

        Args:
            id: Identifikacioni broj (kluč)
            code: Kod (skraćeni naziv)
            name: Naziv izvora
            type: Tip izvora
            location: Lokacija izvora

        """
        ...

    @classmethod
    def from_dict(cls, id: int, code: str, name: str, type: str, location: "LocationDict") -> "TSource":
        """
        Construct from a dictionary (eg. a POST payload).

        Args:
            id: Identifikacioni broj (kluč)
            code: Kod (skraćeni naziv)
            name: Naziv izvora
            type: Tip izvora
            location: Lokacija izvora

        Returns:
            Model instance based on the dictionary.

        """
        ...

    @classmethod
    def from_str(cls, value: str) -> "TSource":
        """
        Construct from a JSON string (eg. a POST payload).

        Returns:
            Model instance based on the JSON string.

        """
        ...

    def to_dict(self) -> SourceDict:
        """
        Convert to a dictionary (eg. to send back for a GET request).

        Returns:
            Dictionary based on the model instance.

        """
        ...

    def to_str(self) -> str:
        """
        Convert to a JSON string (eg. to send back for a GET request).

        Returns:
            JSON string based on the model instance.

        """
        ...


Source: typing.Type[TSource] = models.Source  # type: ignore


class StationDict(typing.TypedDict, total=True):
    """TypedDict for properties that are required."""

    id: int
    name: str
    type: str
    location: "LocationDict"
    capacity: int


class TStation(typing.Protocol):
    """
    SQLAlchemy model protocol.

    Meteorološka stanica

    Attrs:
        id: Identifikacioni broj
        name: Naziv stanice
        type: Tip stanice
        location: Lokacija stanice
        capacity: Kapacitet stanice (broj merača)

    """

    # SQLAlchemy properties
    __table__: sqlalchemy.Table
    __tablename__: str
    query: orm.Query

    # Model properties
    id: 'sqlalchemy.Column[int]'
    name: 'sqlalchemy.Column[str]'
    type: 'sqlalchemy.Column[str]'
    location: 'sqlalchemy.Column["TLocation"]'
    capacity: 'sqlalchemy.Column[int]'

    def __init__(self, id: int, name: str, type: str, location: "TLocation", capacity: int) -> None:
        """
        Construct.

        Args:
            id: Identifikacioni broj
            name: Naziv stanice
            type: Tip stanice
            location: Lokacija stanice
            capacity: Kapacitet stanice (broj merača)

        """
        ...

    @classmethod
    def from_dict(cls, id: int, name: str, type: str, location: "LocationDict", capacity: int) -> "TStation":
        """
        Construct from a dictionary (eg. a POST payload).

        Args:
            id: Identifikacioni broj
            name: Naziv stanice
            type: Tip stanice
            location: Lokacija stanice
            capacity: Kapacitet stanice (broj merača)

        Returns:
            Model instance based on the dictionary.

        """
        ...

    @classmethod
    def from_str(cls, value: str) -> "TStation":
        """
        Construct from a JSON string (eg. a POST payload).

        Returns:
            Model instance based on the JSON string.

        """
        ...

    def to_dict(self) -> StationDict:
        """
        Convert to a dictionary (eg. to send back for a GET request).

        Returns:
            Dictionary based on the model instance.

        """
        ...

    def to_str(self) -> str:
        """
        Convert to a JSON string (eg. to send back for a GET request).

        Returns:
            JSON string based on the model instance.

        """
        ...


Station: typing.Type[TStation] = models.Station  # type: ignore
